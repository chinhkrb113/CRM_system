// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique // Reference to user from core API
  email     String   @unique
  name      String
  avatar    String?
  teamId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team         Team?         @relation(fields: [teamId], references: [id])
  submissions  Submission[]
  evaluations  Evaluation[]  @relation("StudentEvaluations")
  givenEvals   Evaluation[]  @relation("EvaluatorEvaluations")
  skills       StudentSkill[]
  profiles     Profile[]

  @@map("students")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  students Student[]
  tasks    Task[]

  @@map("teams")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String   // "individual", "team", "project"
  difficulty  String   // "easy", "medium", "hard"
  maxScore    Int      @default(100)
  dueDate     DateTime?
  teamId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  team        Team?        @relation(fields: [teamId], references: [id])
  submissions Submission[]

  @@map("tasks")
}

model Submission {
  id          String   @id @default(cuid())
  taskId      String
  studentId   String
  content     String   // JSON string or file path
  status      String   @default("submitted") // "submitted", "evaluated", "graded"
  score       Int?
  feedback    String?
  rubric      String?  // Evaluation rubric as JSON string
  submittedAt DateTime @default(now())
  evaluatedAt DateTime?

  // Relations
  task    Task    @relation(fields: [taskId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([taskId, studentId])
  @@map("submissions")
}

model Evaluation {
  id          String   @id @default(cuid())
  studentId   String   // Who is being evaluated
  evaluatorId String   // Who is doing the evaluation
  type        String   // "360", "peer", "self", "instructor"
  category    String   // "technical", "soft_skills", "leadership", etc.
  score       Int      // 1-10 scale
  feedback    String?
  createdAt   DateTime @default(now())

  // Relations
  student   Student @relation("StudentEvaluations", fields: [studentId], references: [id])
  evaluator Student @relation("EvaluatorEvaluations", fields: [evaluatorId], references: [id])

  @@map("evaluations")
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String   // "technical", "soft", "domain"
  description String?
  createdAt   DateTime @default(now())

  // Relations
  studentSkills StudentSkill[]
  jobSkills     JobSkill[]

  @@map("skills")
}

model StudentSkill {
  id        String   @id @default(cuid())
  studentId String
  skillId   String
  level     Int      @default(1) // 1-10 proficiency level
  verified  Boolean  @default(false)
  updatedAt DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])

  @@unique([studentId, skillId])
  @@map("student_skills")
}

model Profile {
  id          String   @id @default(cuid())
  studentId   String
  profileJson String   // Composed profile data as JSON string
  version     Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id])

  @@map("profiles")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  size        String?  // "startup", "small", "medium", "large"
  location    String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobs Job[]

  @@map("companies")
}

model Job {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  description String
  requirements String?
  location    String?
  salary      String?
  type        String   @default("full-time") // "full-time", "part-time", "internship"
  level       String   @default("entry") // "entry", "mid", "senior"
  status      String   @default("active") // "active", "closed", "draft"
  parsedData  String?  // AI-parsed job data as JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company   Company   @relation(fields: [companyId], references: [id])
  jobSkills JobSkill[]

  @@map("jobs")
}

model JobSkill {
  id       String @id @default(cuid())
  jobId    String
  skillId  String
  required Boolean @default(true)
  weight   Float   @default(1.0)

  // Relations
  job   Job   @relation(fields: [jobId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([jobId, skillId])
  @@map("job_skills")
}