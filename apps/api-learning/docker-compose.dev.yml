version: '3.8'

services:
  # PostgreSQL database for learning service
  learning-db:
    image: postgres:15-alpine
    container_name: learning-db
    environment:
      POSTGRES_DB: learning_db
      POSTGRES_USER: learning_user
      POSTGRES_PASSWORD: learning_password
    ports:
      - "5433:5432"
    volumes:
      - learning_db_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U learning_user -d learning_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  learning-redis:
    image: redis:7-alpine
    container_name: learning-redis
    ports:
      - "6380:6379"
    volumes:
      - learning_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Learning service
  api-learning:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-learning
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://learning_user:learning_password@learning-db:5432/learning_db
      REDIS_URL: redis://learning-redis:6379
      JWT_SECRET: your-jwt-secret-key
      CORE_API_URL: http://host.docker.internal:3000
      AI_JD_SERVICE_URL: http://host.docker.internal:8080
    ports:
      - "3001:3001"
    depends_on:
      learning-db:
        condition: service_healthy
      learning-redis:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  learning_db_data:
  learning_redis_data:

networks:
  default:
    name: crm-network
    external: true