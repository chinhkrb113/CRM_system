// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  SALES
  SUPPORT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum LeadSource {
  WEBSITE
  SOCIAL_MEDIA
  REFERRAL
  COLD_CALL
  EMAIL_CAMPAIGN
  OTHER
}

enum InteractionType {
  CALL
  EMAIL
  MEETING
  NOTE
  SMS
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(SALES)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownedLeads    Lead[]        @relation("LeadOwner")
  interactions  Interaction[]
  appointments  Appointment[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Lead {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  email        String
  phone        String?
  company      String?
  jobTitle     String?
  status       LeadStatus @default(NEW)
  source       LeadSource
  score        Int?       @db.SmallInt
  notes        String?
  customFields Json?
  ownerId      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  owner        User?         @relation("LeadOwner", fields: [ownerId], references: [id])
  interactions Interaction[]
  appointments Appointment[]
  payments     Payment[]
  auditLogs    AuditLog[]

  @@map("leads")
}

model Interaction {
  id                String          @id @default(uuid())
  leadId            String
  userId            String
  type              InteractionType
  subject           String
  description       String?
  scheduledAt       DateTime?
  duration          Int?
  outcome           String?
  followUpRequired  Boolean         @default(false)
  followUpDate      DateTime?
  completedAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("interactions")
}

model Appointment {
  id              String            @id @default(uuid())
  leadId          String
  userId          String
  title           String
  description     String?
  scheduledAt     DateTime
  duration        Int               @default(60)
  location        String?
  meetingType     String            @default("IN_PERSON")
  reminderMinutes Int?
  status          AppointmentStatus @default(SCHEDULED)
  notes           String?
  outcome         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("appointments")
}

model Payment {
  id          String        @id @default(uuid())
  leadId      String
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  status      PaymentStatus @default(PENDING)
  paymentLink String
  description String?
  expiresAt   DateTime?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])

  @@map("payments")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  leadId    String?
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])
  lead Lead? @relation(fields: [leadId], references: [id])

  @@map("audit_logs")
}