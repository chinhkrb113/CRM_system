# Core API - Complete Documentation

## üéØ Project Overview

Core API l√† h·ªá th·ªëng qu·∫£n l√Ω CRM v·ªõi MySQL database, bao g·ªìm:
- Qu·∫£n l√Ω Users, Leads, Appointments, Interactions, Payments
- JWT Authentication
- Swagger API Documentation
- Full CRUD operations cho t·∫•t c·∫£ entities

## ‚úÖ Current Status

### Database MySQL ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ho√†n ch·ªânh:
- Database: core_db tr√™n MySQL Server
- Connection: mysql://root:@localhost:3306/core_db
- Tables: 5 b·∫£ng ch√≠nh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
- Sample Data: ƒê√£ seed ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu m·∫´u
- API Server: ƒêang ch·∫°y tr√™n port 3001
- Swagger UI: http://localhost:3001/api/docs

### Database Tables:
- users (admin, manager, sales users)
- leads (potential customers)
- appointments (scheduled meetings)
- interactions (customer communications)
- payments (transaction records)

### Sample Data Created:
- 3 Users (Admin, Manager, Sales)
- Multiple Leads v·ªõi different statuses
- Appointments v·ªõi various statuses
- Interactions tracking customer communications
- Payment records v·ªõi different statuses

## üöÄ Quick Start

### 1. Setup Database

#### Option A: XAMPP (Recommended for Windows)
1. Download XAMPP: https://www.apachefriends.org/download.html
2. Install v√† kh·ªüi ƒë·ªông Apache + MySQL
3. M·ªü phpMyAdmin: http://localhost/phpmyadmin
4. T·∫°o database m·ªõi t√™n 'core_db'
5. T·∫°o user m·ªõi:
   - Username: core_user
   - Password: core_password
   - Grant all privileges on core_db

#### Option B: MySQL Server
1. Download MySQL: https://dev.mysql.com/downloads/mysql/
2. Install v·ªõi root password: root
3. T·∫°o database:
   CREATE DATABASE core_db;
   CREATE USER 'core_user'@'localhost' IDENTIFIED BY 'core_password';
   GRANT ALL PRIVILEGES ON core_db.* TO 'core_user'@'localhost';
   FLUSH PRIVILEGES;

#### Option C: Automated Setup (PowerShell)
Ch·∫°y script t·ª± ƒë·ªông:
```powershell
.\setup-mysql-database.ps1
```

### 2. Environment Setup
Copy .env.example th√†nh .env v√† update:
```
DATABASE_URL="mysql://root:@localhost:3306/core_db"
PORT=3001
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
```

### 3. Install Dependencies
```bash
npm install
```

### 4. Database Migration
```bash
npx prisma generate
npx prisma db push
npx prisma db seed
```

### 5. Start Server
```bash
# Development mode
npm run dev

# Production mode
npm run build
npm start
```

## üîê Authentication

### Generate JWT Token
```bash
node test-token.js
```

### Use Token in API
```
Authorization: Bearer <your-jwt-token>
```

### Sample Token
```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InRlc3QtdXNlci1pZCIsImVtYWlsIjoidGVzdEBleGFtcGxlLmNvbSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1NTA3OTA3MSwiZXhwIjoxNzU1MTY1NDcxfQ.tqwrNOEp8ozvedEJIZ_NuMab_e3TdBMsYFc4AugbIJ0
```

## üìã API Endpoints

### Authentication API
- POST /api/core/auth/login - User login
- POST /api/core/auth/register - User registration
- POST /api/core/auth/refresh - Refresh token
- POST /api/core/auth/logout - User logout

### Users API
- GET /api/core/users - L·∫•y danh s√°ch users
- POST /api/core/users - T·∫°o user m·ªõi
- GET /api/core/users/{id} - L·∫•y th√¥ng tin chi ti·∫øt user
- PUT /api/core/users/{id} - C·∫≠p nh·∫≠t user
- DELETE /api/core/users/{id} - X√≥a user
- GET /api/core/users/profile - L·∫•y profile c·ªßa current user

### Leads API
- GET /api/core/leads - L·∫•y danh s√°ch leads
- POST /api/core/leads - T·∫°o lead m·ªõi
- GET /api/core/leads/{id} - L·∫•y th√¥ng tin chi ti·∫øt lead
- PUT /api/core/leads/{id} - C·∫≠p nh·∫≠t lead
- DELETE /api/core/leads/{id} - X√≥a lead
- GET /api/core/leads/stats - Th·ªëng k√™ leads
- PUT /api/core/leads/{id}/status - C·∫≠p nh·∫≠t status c·ªßa lead

### Appointments API
- GET /api/core/appointments - L·∫•y danh s√°ch appointments
- POST /api/core/appointments - T·∫°o appointment m·ªõi
- GET /api/core/appointments/{id} - L·∫•y th√¥ng tin chi ti·∫øt appointment
- PUT /api/core/appointments/{id} - C·∫≠p nh·∫≠t appointment
- DELETE /api/core/appointments/{id} - X√≥a appointment
- GET /api/core/appointments/calendar - L·∫•y calendar view
- PUT /api/core/appointments/{id}/status - C·∫≠p nh·∫≠t status

### Interactions API
- GET /api/core/interactions - L·∫•y danh s√°ch interactions
- POST /api/core/interactions - T·∫°o interaction m·ªõi
- GET /api/core/interactions/{id} - L·∫•y th√¥ng tin chi ti·∫øt interaction
- PUT /api/core/interactions/{id} - C·∫≠p nh·∫≠t interaction
- DELETE /api/core/interactions/{id} - X√≥a interaction
- GET /api/core/interactions/lead/{leadId} - L·∫•y interactions c·ªßa lead

### Payments API
- GET /api/core/payments - L·∫•y danh s√°ch payments
- POST /api/core/payments - T·∫°o payment m·ªõi
- GET /api/core/payments/{id} - L·∫•y th√¥ng tin chi ti·∫øt payment
- PUT /api/core/payments/{id} - C·∫≠p nh·∫≠t payment
- DELETE /api/core/payments/{id} - X√≥a payment
- GET /api/core/payments/stats - Th·ªëng k√™ payments

### AI Services API
- POST /api/core/ai/analyze-lead - Ph√¢n t√≠ch lead b·∫±ng AI
- POST /api/core/ai/generate-response - T·∫°o response t·ª± ƒë·ªông
- POST /api/core/ai/predict-conversion - D·ª± ƒëo√°n conversion rate

## üß™ Testing

### Run Tests
```bash
# Unit tests
npm test

# Watch mode
npm run test:watch

# Coverage
npm run test:coverage

# E2E tests
npm run test:e2e
```

### API Testing v·ªõi curl
```bash
# Health check
curl http://localhost:3001/health

# Get users (with auth)
curl -H "Authorization: Bearer <token>" http://localhost:3001/api/core/users

# Create lead
curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer <token>" \
  -d '{"firstName":"John","lastName":"Doe","email":"john@example.com"}' \
  http://localhost:3001/api/core/leads
```

## üê≥ Docker Support

### Development v·ªõi Docker
```bash
# Start MySQL only
docker-compose -f docker-compose.mysql.yml up -d

# Start full development environment
docker-compose -f docker-compose.dev.yml up -d
```

### Production Build
```bash
docker build -t crm-core-api .
docker run -p 3001:3001 crm-core-api
```

## üìä Database Management

### Prisma Commands
```bash
# Generate client
npx prisma generate

# Push schema changes
npx prisma db push

# Create migration
npx prisma migrate dev --name migration_name

# Reset database
npx prisma migrate reset

# Seed database
npx prisma db seed

# Open Prisma Studio
npx prisma studio
```

### Database Backup
```bash
mysqldump -u root -p core_db > backup.sql
mysql -u root -p core_db < backup.sql
```

## üîß Development

### Project Structure
```
src/
‚îú‚îÄ‚îÄ index.ts              # Main entry point
‚îú‚îÄ‚îÄ config/               # Configuration files
‚îú‚îÄ‚îÄ controllers/          # Route controllers
‚îú‚îÄ‚îÄ middleware/           # Express middleware
‚îú‚îÄ‚îÄ routes/              # API routes
‚îú‚îÄ‚îÄ services/            # Business logic
‚îú‚îÄ‚îÄ lib/                 # Utilities and libraries
‚îú‚îÄ‚îÄ types/               # TypeScript type definitions
‚îú‚îÄ‚îÄ utils/               # Helper functions
‚îî‚îÄ‚îÄ __tests__/           # Test files
```

### Code Style
```bash
# Lint code
npm run lint

# Fix lint issues
npm run lint:fix
```

## üöÄ Deployment

### Environment Variables
```
NODE_ENV=production
PORT=3001
DATABASE_URL=mysql://user:password@host:port/database
JWT_SECRET=your-production-secret
JWT_EXPIRES_IN=7d
CORS_ORIGIN=https://your-frontend-domain.com
```

### Production Checklist
- [ ] Update JWT_SECRET v·ªõi strong secret
- [ ] Configure CORS_ORIGIN cho production domain
- [ ] Setup production database
- [ ] Configure logging level
- [ ] Setup monitoring v√† health checks
- [ ] Configure rate limiting
- [ ] Setup SSL/TLS

## üìö API Documentation

### Swagger UI
Truy c·∫≠p: http://localhost:3001/api/docs

### API Response Format
```json
{
  "success": true,
  "data": {},
  "message": "Success message",
  "timestamp": "2024-01-15T10:30:00.000Z"
}
```

### Error Response Format
```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Error description",
    "details": {}
  },
  "timestamp": "2024-01-15T10:30:00.000Z"
}
```

## üîç Troubleshooting

### Common Issues

1. **Database Connection Error**
   - Check MySQL server is running
   - Verify DATABASE_URL in .env
   - Check database exists

2. **Port Already in Use**
   - Change PORT in .env file
   - Kill process using port: `netstat -ano | findstr :3001`

3. **Prisma Generate Error**
   - Delete node_modules v√† reinstall
   - Run `npx prisma generate` manually

4. **JWT Token Invalid**
   - Check JWT_SECRET matches between .env v√† test-token.js
   - Generate new token v·ªõi `node test-token.js`

### Logs
```bash
# View application logs
npm run dev

# Database logs
npx prisma studio
```

## üìû Support

N·∫øu g·∫∑p v·∫•n ƒë·ªÅ:
1. Check troubleshooting section
2. Review API documentation
3. Check database connection
4. Verify environment variables

---

**Happy Coding! üöÄ**