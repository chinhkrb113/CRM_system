openapi: 3.0.3
info:
  title: AI Ops Service
  description: |
    AI Service for Anomaly Detection & Code/Design Scoring
    
    This service provides three main capabilities:
    - **Anomaly Detection**: Detect anomalies in time series KPI data using z-score analysis
    - **Code Grading**: Grade code quality using rule-based analysis and complexity estimation
    - **Design Grading**: Grade design quality using heuristic analysis
    
    ## Features
    - Real-time anomaly detection with configurable thresholds
    - Comprehensive code quality analysis with detailed feedback
    - Design quality assessment with actionable recommendations
    - RESTful API with OpenAPI documentation
    - Docker containerization support
  version: 1.0.0
  contact:
    name: AI Ops Team
    email: ai-ops@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8003
    description: Development server
  - url: https://api.company.com/ai-ops
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Welcome message and service information
      tags:
        - General
      responses:
        '200':
          description: Service welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to AI Ops Service"
                  service:
                    type: string
                    example: "ai-ops"
                  version:
                    type: string
                    example: "1.0.0"
                  endpoints:
                    type: object
                    properties:
                      anomaly_detection:
                        type: string
                        example: "/api/ai/ops/anomaly"
                      code_grading:
                        type: string
                        example: "/api/ai/ops/code/grade"
                      design_grading:
                        type: string
                        example: "/api/ai/ops/design/grade"

  /health:
    get:
      summary: Health check
      description: Check service health status
      tags:
        - General
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "ai-ops"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"

  /api/ai/ops/info:
    get:
      summary: Service information
      description: Get detailed service information and capabilities
      tags:
        - General
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  service_name:
                    type: string
                    example: "AI Ops Service"
                  version:
                    type: string
                    example: "1.0.0"
                  description:
                    type: string
                    example: "AI Service for Anomaly Detection & Code/Design Scoring"
                  capabilities:
                    type: array
                    items:
                      type: string
                    example: ["anomaly_detection", "code_grading", "design_grading"]
                  endpoints:
                    type: object
                    properties:
                      anomaly_detection:
                        type: string
                        example: "/api/ai/ops/anomaly"
                      code_grading:
                        type: string
                        example: "/api/ai/ops/code/grade"
                      design_grading:
                        type: string
                        example: "/api/ai/ops/design/grade"

  /api/ai/ops/anomaly:
    post:
      summary: Detect anomalies in time series data
      description: |
        Analyze time series KPI data to detect anomalies using z-score analysis.
        
        The service calculates statistical measures (mean, standard deviation) and identifies
        data points that deviate significantly from the normal pattern.
      tags:
        - Anomaly Detection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnomalyDetectionRequest'
            examples:
              basic_example:
                summary: Basic anomaly detection
                value:
                  data:
                    - timestamp: "2024-01-01T00:00:00Z"
                      value: 100.0
                      metric_name: "cpu_usage"
                    - timestamp: "2024-01-01T01:00:00Z"
                      value: 105.0
                      metric_name: "cpu_usage"
                    - timestamp: "2024-01-01T02:00:00Z"
                      value: 200.0
                      metric_name: "cpu_usage"
                  threshold: 2.0
      responses:
        '200':
          description: Anomaly detection results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnomalyDetectionResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get anomaly detection endpoint information
      description: Information about the anomaly detection endpoint
      tags:
        - Anomaly Detection
      responses:
        '200':
          description: Endpoint information
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: string
                    example: "/api/ai/ops/anomaly"
                  method:
                    type: string
                    example: "POST"
                  description:
                    type: string
                    example: "Detect anomalies in time series KPI data using z-score analysis"
                  parameters:
                    type: object
                    properties:
                      data:
                        type: string
                        example: "Array of time series data points"
                      threshold:
                        type: string
                        example: "Z-score threshold for anomaly detection (default: 2.0)"

  /api/ai/ops/code/grade:
    post:
      summary: Grade code quality
      description: |
        Analyze code quality using rule-based analysis and complexity estimation.
        
        The service evaluates multiple aspects:
        - Documentation (docstrings, comments)
        - Type hints and naming conventions
        - Error handling and security
        - Code complexity and duplication
        - Function length and structure
      tags:
        - Code Grading
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeGradingRequest'
            examples:
              direct_code:
                summary: Direct code content
                value:
                  code_content: |
                    def fibonacci(n: int) -> int:
                        """Calculate fibonacci number recursively."""
                        if n <= 1:
                            return n
                        return fibonacci(n-1) + fibonacci(n-2)
                  language: "python"
              repo_url:
                summary: Repository URL
                value:
                  repo_url: "https://github.com/user/repo"
                  language: "python"
      responses:
        '200':
          description: Code grading results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradingResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get code grading endpoint information
      description: Information about the code grading endpoint
      tags:
        - Code Grading
      responses:
        '200':
          description: Endpoint information
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: string
                    example: "/api/ai/ops/code/grade"
                  method:
                    type: string
                    example: "POST"
                  description:
                    type: string
                    example: "Grade code quality using rule-based analysis"
                  supported_languages:
                    type: array
                    items:
                      type: string
                    example: ["python", "javascript", "java", "go"]

  /api/ai/ops/design/grade:
    post:
      summary: Grade design quality
      description: |
        Analyze design quality using heuristic analysis.
        
        The service evaluates design aspects:
        - Visual alignment and consistency
        - Color harmony and contrast
        - Typography and spacing
        - Accessibility considerations
        - Overall aesthetic appeal
      tags:
        - Design Grading
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesignGradingRequest'
            examples:
              design_url:
                summary: Design file URL
                value:
                  file_url: "https://example.com/design.png"
                  design_type: "web_interface"
              design_content:
                summary: Direct design content
                value:
                  design_content: |
                    body {
                      font-family: 'Arial', sans-serif;
                      background-color: #f5f5f5;
                      margin: 0;
                      padding: 20px;
                    }
                  design_type: "web_interface"
      responses:
        '200':
          description: Design grading results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradingResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get design grading endpoint information
      description: Information about the design grading endpoint
      tags:
        - Design Grading
      responses:
        '200':
          description: Endpoint information
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: string
                    example: "/api/ai/ops/design/grade"
                  method:
                    type: string
                    example: "POST"
                  description:
                    type: string
                    example: "Grade design quality using heuristic analysis"
                  supported_formats:
                    type: array
                    items:
                      type: string
                    example: ["png", "jpg", "svg", "pdf", "css", "html"]

components:
  schemas:
    TimeSeriesDataPoint:
      type: object
      required:
        - timestamp
        - value
        - metric_name
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the data point
          example: "2024-01-01T00:00:00Z"
        value:
          type: number
          format: float
          description: Numeric value of the metric
          example: 100.5
        metric_name:
          type: string
          description: Name of the metric being measured
          example: "cpu_usage"

    AnomalyDetectionRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
          description: Array of time series data points
          minItems: 3
        threshold:
          type: number
          format: float
          description: Z-score threshold for anomaly detection
          default: 2.0
          minimum: 0.1
          maximum: 5.0
          example: 2.0

    AnomalyPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the anomalous data point
          example: "2024-01-01T02:00:00Z"
        value:
          type: number
          format: float
          description: Value of the anomalous data point
          example: 200.0
        z_score:
          type: number
          format: float
          description: Z-score of the data point
          example: 3.5
        severity:
          type: string
          enum: ["low", "medium", "high", "critical"]
          description: Severity level of the anomaly
          example: "high"

    AnomalyDetectionResponse:
      type: object
      properties:
        anomalies:
          type: array
          items:
            $ref: '#/components/schemas/AnomalyPoint'
          description: List of detected anomalies
        total_points:
          type: integer
          description: Total number of data points analyzed
          example: 100
        anomaly_count:
          type: integer
          description: Number of anomalies detected
          example: 3
        statistics:
          type: object
          properties:
            mean:
              type: number
              format: float
              description: Mean value of the dataset
              example: 102.5
            std_dev:
              type: number
              format: float
              description: Standard deviation of the dataset
              example: 15.2
            threshold_used:
              type: number
              format: float
              description: Z-score threshold used for detection
              example: 2.0

    CodeGradingRequest:
      type: object
      properties:
        repo_url:
          type: string
          format: uri
          description: Repository URL to analyze
          example: "https://github.com/user/repo"
        code_zip:
          type: string
          description: Base64 encoded ZIP file containing code
          example: "UEsDBBQAAAAIAOqF..."
        code_content:
          type: string
          description: Direct code content to analyze
          example: |
            def fibonacci(n: int) -> int:
                """Calculate fibonacci number recursively."""
                if n <= 1:
                    return n
                return fibonacci(n-1) + fibonacci(n-2)
        language:
          type: string
          description: Programming language
          default: "python"
          enum: ["python", "javascript", "java", "go", "cpp", "csharp"]
          example: "python"

    DesignGradingRequest:
      type: object
      properties:
        file_url:
          type: string
          format: uri
          description: URL to design file (image, PDF, etc.)
          example: "https://example.com/design.png"
        design_content:
          type: string
          description: Direct design content (CSS, HTML, etc.)
          example: |
            body {
              font-family: 'Arial', sans-serif;
              background-color: #f5f5f5;
            }
        design_type:
          type: string
          description: Type of design being analyzed
          default: "web_interface"
          enum: ["web_interface", "mobile_app", "logo", "banner", "infographic"]
          example: "web_interface"

    GradingReason:
      type: object
      properties:
        category:
          type: string
          description: Category of the grading reason
          example: "code_quality"
        description:
          type: string
          description: Detailed description of the issue or strength
          example: "Function lacks proper docstring documentation"
        impact:
          type: string
          enum: ["positive", "negative", "neutral", "critical"]
          description: Impact on overall score
          example: "negative"
        suggestion:
          type: string
          description: Suggestion for improvement
          example: "Add comprehensive docstrings to all functions"

    GradingResponse:
      type: object
      properties:
        ai_score:
          type: number
          format: float
          description: Overall AI-generated score (0-100)
          minimum: 0
          maximum: 100
          example: 75.5
        reasons:
          type: array
          items:
            $ref: '#/components/schemas/GradingReason'
          description: Detailed reasons for the score

    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: Error message
          example: "Invalid request data"
        error_code:
          type: string
          description: Error code for programmatic handling
          example: "INVALID_INPUT"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when error occurred
          example: "2024-01-15T10:30:00Z"

tags:
  - name: General
    description: General service endpoints
  - name: Anomaly Detection
    description: Time series anomaly detection endpoints
  - name: Code Grading
    description: Code quality analysis endpoints
  - name: Design Grading
    description: Design quality analysis endpoints

externalDocs:
  description: Find more info here
  url: https://docs.company.com/ai-ops