openapi: 3.0.3
info:
  title: Learning API
  description: |
    API for managing students, teams, tasks, submissions, evaluations, skills, companies, and jobs in the CRM learning system.
    
    This API provides endpoints for:
    - Student and team management
    - Task and submission tracking
    - Skill assessment and evaluation
    - Company and job management
    - AI-powered job description parsing and candidate matching
  version: 1.0.0
  contact:
    name: CRM Learning API
    email: support@crm-learning.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api-learning.crm.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Basic health check
      description: Returns basic health status of the service
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  service:
                    type: string
                    example: api-learning
                  timestamp:
                    type: string
                    format: date-time

  /health/detailed:
    get:
      tags:
        - Health
      summary: Detailed health check
      description: Returns detailed health status including database connectivity
      responses:
        '200':
          description: Detailed health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealth'

  /api/learn/students:
    get:
      tags:
        - Students
      summary: List students
      description: Get a paginated list of students with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: teamId
          in: query
          schema:
            type: string
          description: Filter by team ID
        - name: q
          in: query
          schema:
            type: string
          description: Search by name or email
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: student-1
                    name: Alice Johnson
                    email: alice@example.com
                    avatar: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
                    teamId: team-1
                    team:
                      id: team-1
                      name: Frontend Team
                    submissionCount: 5
                    evaluationCount: 3
                pagination:
                  page: 1
                  limit: 20
                  total: 1
                  totalPages: 1

  /api/learn/students/{id}:
    get:
      tags:
        - Students
      summary: Get student details
      description: Get detailed information about a specific student
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentDetail'
              example:
                id: student-1
                name: Alice Johnson
                email: alice@example.com
                avatar: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
                teamId: team-1
                team:
                  id: team-1
                  name: Frontend Team
                  description: Team focused on frontend development
                skills:
                  - skill:
                      id: skill-1
                      name: JavaScript
                      category: technical
                    level: 8
                    verified: true
                recentSubmissions:
                  - id: sub-1
                    score: 85
                    status: evaluated
                    task:
                      title: React Component
                recentEvaluations:
                  - id: eval-1
                    score: 8
                    category: technical
                    type: peer
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/students/{id}/skills:
    get:
      tags:
        - Students
      summary: Get student skills
      description: Get skills associated with a specific student
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student skills grouped by category
          content:
            application/json:
              schema:
                type: object
                properties:
                  technical:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentSkill'
                  soft:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentSkill'
                  domain:
                    type: array
                    items:
                      $ref: '#/components/schemas/StudentSkill'
              example:
                technical:
                  - skill:
                      id: skill-1
                      name: JavaScript
                      category: technical
                    level: 8
                    verified: true
                soft:
                  - skill:
                      id: skill-2
                      name: Communication
                      category: soft
                    level: 7
                    verified: false
        '404':
          $ref: '#/components/responses/NotFound'
    
    patch:
      tags:
        - Students
      summary: Update student skills
      description: Update skills for a specific student
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                skills:
                  type: array
                  items:
                    type: object
                    properties:
                      skillId:
                        type: string
                      level:
                        type: integer
                        minimum: 1
                        maximum: 10
                      verified:
                        type: boolean
                        default: false
                    required: [skillId, level]
              required: [skills]
            example:
              skills:
                - skillId: skill-1
                  level: 8
                  verified: true
                - skillId: skill-2
                  level: 7
                  verified: false
      responses:
        '200':
          description: Skills updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Skills updated successfully
                  updatedCount:
                    type: integer
                    example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/students/{id}/profile:
    get:
      tags:
        - Students
      summary: Get student profile
      description: Get comprehensive profile for a student including skills, performance, and AI insights
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: refresh
          in: query
          schema:
            type: boolean
            default: false
          description: Force refresh of cached profile
      responses:
        '200':
          description: Student profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfile'
              example:
                id: student-1
                name: Alice Johnson
                email: alice@example.com
                avatar: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
                team:
                  id: team-1
                  name: Frontend Team
                skills:
                  technical:
                    - skill:
                        id: skill-1
                        name: JavaScript
                        category: technical
                      level: 8
                      verified: true
                performance:
                  tasks:
                    totalSubmissions: 10
                    averageScore: 85.5
                    completionRate: 90
                  evaluations:
                    averageScore: 8.2
                    totalEvaluations: 15
                insights:
                  strengths:
                    - Strong JavaScript programming skills
                    - Excellent problem-solving abilities
                  areasForImprovement:
                    - Could improve CSS styling skills
                    - Time management in project delivery
                  recommendations:
                    - Consider taking advanced React course
                    - Practice more complex algorithm problems
                generatedAt: "2024-01-15T10:30:00Z"
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/teams:
    get:
      tags:
        - Teams
      summary: List teams
      description: Get a paginated list of teams
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of teams
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeamSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: team-1
                    name: Frontend Team
                    description: Team focused on frontend development
                    memberCount: 5
                    taskCount: 3
                pagination:
                  page: 1
                  limit: 20
                  total: 1
                  totalPages: 1

    post:
      tags:
        - Teams
      summary: Create team
      description: Create a new team
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Backend Team
                description:
                  type: string
                  nullable: true
                  example: Team focused on backend development
              required: [name]
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/teams/{id}:
    get:
      tags:
        - Teams
      summary: Get team details
      description: Get detailed information about a specific team
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Team details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDetail'
              example:
                id: team-1
                name: Frontend Team
                description: Team focused on frontend development
                members:
                  - id: student-1
                    name: Alice Johnson
                    email: alice@example.com
                    avatar: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
                tasks:
                  - id: task-1
                    title: React Component
                    description: Build a reusable React component
                    status: active
                    dueDate: "2024-02-01T23:59:59Z"
                memberCount: 5
                taskCount: 3
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/teams/{id}/members:
    post:
      tags:
        - Teams
      summary: Assign members to team
      description: Add students to a team
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentIds:
                  type: array
                  items:
                    type: string
                  example: ["student-1", "student-2"]
              required: [studentIds]
      responses:
        '200':
          description: Members assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Members assigned successfully
                  assignedCount:
                    type: integer
                    example: 2
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      description: Get a paginated list of tasks with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: teamId
          in: query
          schema:
            type: string
          description: Filter by team ID
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, completed, archived]
          description: Filter by status
        - name: q
          in: query
          schema:
            type: string
          description: Search by title or description
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  stats:
                    type: object
                    properties:
                      totalSubmissions:
                        type: integer
                      completionRate:
                        type: number
              example:
                data:
                  - id: task-1
                    title: React Component
                    description: Build a reusable React component
                    status: active
                    maxScore: 100
                    dueDate: "2024-02-01T23:59:59Z"
                    team:
                      id: team-1
                      name: Frontend Team
                    submissionCount: 3
                    averageScore: 85.5
                pagination:
                  page: 1
                  limit: 20
                  total: 1
                  totalPages: 1
                stats:
                  totalSubmissions: 3
                  completionRate: 60.0

    post:
      tags:
        - Tasks
      summary: Create task
      description: Create a new task
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: React Component
                description:
                  type: string
                  nullable: true
                  example: Build a reusable React component
                teamId:
                  type: string
                  example: team-1
                maxScore:
                  type: integer
                  minimum: 1
                  example: 100
                dueDate:
                  type: string
                  format: date-time
                  example: "2024-02-01T23:59:59Z"
                requirements:
                  type: object
                  nullable: true
                  example: {"framework": "React", "testing": "Jest"}
                status:
                  type: string
                  enum: [draft, active, completed, archived]
                  default: draft
              required: [title, teamId, maxScore, dueDate]
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task details
      description: Get detailed information about a specific task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
              example:
                id: task-1
                title: React Component
                description: Build a reusable React component
                teamId: team-1
                team:
                  id: team-1
                  name: Frontend Team
                maxScore: 100
                dueDate: "2024-02-01T23:59:59Z"
                requirements:
                  framework: React
                  testing: Jest
                status: active
                submissions:
                  - id: sub-1
                    studentId: student-1
                    student:
                      name: Alice Johnson
                    status: evaluated
                    score: 85
                stats:
                  totalSubmissions: 3
                  uniqueStudents: 3
                  averageScore: 85.5
                  submissionRate: 60.0
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Tasks
      summary: Update task
      description: Update an existing task
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                teamId:
                  type: string
                maxScore:
                  type: integer
                  minimum: 1
                dueDate:
                  type: string
                  format: date-time
                requirements:
                  type: object
                  nullable: true
                status:
                  type: string
                  enum: [draft, active, completed, archived]
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: Delete a task (only if no submissions exist)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Task deleted successfully
        '400':
          description: Cannot delete task with submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Cannot delete task with existing submissions
                code: TASK_HAS_SUBMISSIONS
        '404':
           $ref: '#/components/responses/NotFound'

  /api/learn/submissions:
    get:
      tags:
        - Submissions
      summary: List submissions
      description: Get a paginated list of submissions with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: taskId
          in: query
          schema:
            type: string
          description: Filter by task ID
        - name: studentId
          in: query
          schema:
            type: string
          description: Filter by student ID
        - name: status
          in: query
          schema:
            type: string
            enum: [submitted, evaluated]
          description: Filter by status
      responses:
        '200':
          description: List of submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubmissionSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: sub-1
                    taskId: task-1
                    studentId: student-1
                    student:
                      name: Alice Johnson
                    content:
                      github_url: https://github.com/user/repo
                    status: evaluated
                    score: 85
                    isLate: false
                    scorePercentage: 85.0
                pagination:
                  page: 1
                  limit: 20
                  total: 1
                  totalPages: 1

    post:
      tags:
        - Submissions
      summary: Create submission
      description: Create a new submission
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                taskId:
                  type: string
                  example: task-1
                studentId:
                  type: string
                  example: student-1
                content:
                  type: object
                  example: {"github_url": "https://github.com/user/repo"}
              required: [taskId, studentId, content]
      responses:
        '201':
          description: Submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/submissions/{id}:
    get:
      tags:
        - Submissions
      summary: Get submission details
      description: Get detailed information about a specific submission
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Submission details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Submissions
      summary: Update submission
      description: Update submission content (only if not evaluated)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  example: {"github_url": "https://github.com/user/repo"}
              required: [content]
      responses:
        '200':
          description: Submission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDetail'
        '400':
          description: Cannot update evaluated submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Cannot update evaluated submission
                code: SUBMISSION_ALREADY_EVALUATED
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Submissions
      summary: Delete submission
      description: Delete a submission (only if not evaluated)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Submission deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Submission deleted successfully
        '400':
          description: Cannot delete evaluated submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Cannot delete evaluated submission
                code: SUBMISSION_ALREADY_EVALUATED
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/submissions/{id}/evaluate:
    post:
      tags:
        - Submissions
      summary: Evaluate submission
      description: Evaluate a submission with score, feedback, and rubric
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                  minimum: 0
                  example: 85
                feedback:
                  type: string
                  nullable: true
                  example: Good work on the implementation
                rubric:
                  type: object
                  nullable: true
                  example: {"code_quality": 8, "functionality": 9}
              required: [score]
      responses:
        '200':
          description: Submission evaluated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/evaluations:
    get:
      tags:
        - Evaluations
      summary: List evaluations
      description: Get a paginated list of evaluations with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: studentId
          in: query
          schema:
            type: string
          description: Filter by student ID
        - name: evaluatorId
          in: query
          schema:
            type: string
          description: Filter by evaluator ID
        - name: type
          in: query
          schema:
            type: string
            enum: [peer, self, instructor]
          description: Filter by evaluation type
        - name: category
          in: query
          schema:
            type: string
            enum: [technical, communication, leadership, problem_solving]
          description: Filter by category
      responses:
        '200':
          description: List of evaluations
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/EvaluationDetail'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Evaluations
      summary: Create evaluation
      description: Create a new evaluation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                  example: student-1
                evaluatorId:
                  type: string
                  example: student-2
                type:
                  type: string
                  enum: [peer, self, instructor]
                  example: peer
                category:
                  type: string
                  enum: [technical, communication, leadership, problem_solving]
                  example: technical
                score:
                  type: integer
                  minimum: 1
                  maximum: 10
                  example: 8
                feedback:
                  type: string
                  nullable: true
                  example: Strong technical skills demonstrated
              required: [studentId, evaluatorId, type, category, score]
      responses:
        '201':
          description: Evaluation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/evaluations/bulk:
    post:
      tags:
        - Evaluations
      summary: Create bulk evaluations
      description: Create multiple evaluations in a single transaction
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                evaluations:
                  type: array
                  items:
                    type: object
                    properties:
                      studentId:
                        type: string
                      evaluatorId:
                        type: string
                      type:
                        type: string
                        enum: [peer, self, instructor]
                      category:
                        type: string
                        enum: [technical, communication, leadership, problem_solving]
                      score:
                        type: integer
                        minimum: 1
                        maximum: 10
                      feedback:
                        type: string
                        nullable: true
                    required: [studentId, evaluatorId, type, category, score]
              required: [evaluations]
      responses:
        '201':
          description: Evaluations created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Evaluations created successfully
                  createdCount:
                    type: integer
                    example: 5
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/evaluations/{id}:
    get:
      tags:
        - Evaluations
      summary: Get evaluation details
      description: Get detailed information about a specific evaluation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Evaluation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/evaluations/stats/{studentId}:
    get:
      tags:
        - Evaluations
      summary: Get student evaluation statistics
      description: Get evaluation statistics for a specific student
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student evaluation statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationStats'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/companies:
    get:
      tags:
        - Companies
      summary: List companies
      description: Get a paginated list of companies with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: industry
          in: query
          schema:
            type: string
          description: Filter by industry
        - name: size
          in: query
          schema:
            type: string
            enum: [startup, small, medium, large, enterprise]
          description: Filter by company size
        - name: q
          in: query
          schema:
            type: string
          description: Search by name or description
      responses:
        '200':
          description: List of companies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CompanySummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Companies
      summary: Create company
      description: Create a new company
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Tech Corp
                description:
                  type: string
                  nullable: true
                  example: Leading technology company
                website:
                  type: string
                  nullable: true
                  example: https://techcorp.com
                industry:
                  type: string
                  nullable: true
                  example: Technology
                size:
                  type: string
                  enum: [startup, small, medium, large, enterprise]
                  nullable: true
                  example: large
                location:
                  type: string
                  nullable: true
                  example: San Francisco, CA
              required: [name]
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/companies/{id}:
    get:
      tags:
        - Companies
      summary: Get company details
      description: Get detailed information about a specific company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Companies
      summary: Update company
      description: Update an existing company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                  nullable: true
                website:
                  type: string
                  nullable: true
                industry:
                  type: string
                  nullable: true
                size:
                  type: string
                  enum: [startup, small, medium, large, enterprise]
                  nullable: true
                location:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Companies
      summary: Delete company
      description: Delete a company (only if no jobs exist)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Company deleted successfully
        '400':
          description: Cannot delete company with jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Cannot delete company with existing jobs
                code: COMPANY_HAS_JOBS
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/companies/{id}/jobs:
    get:
      tags:
        - Companies
      summary: Get company jobs
      description: Get jobs associated with a specific company
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, closed, archived]
          description: Filter by status
        - name: type
          in: query
          schema:
            type: string
            enum: [full_time, part_time, contract, internship]
          description: Filter by job type
        - name: level
          in: query
          schema:
            type: string
            enum: [entry, junior, mid, senior, lead, principal]
          description: Filter by experience level
      responses:
        '200':
          description: Company jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/jobs:
    get:
      tags:
        - Jobs
      summary: List jobs
      description: Get a paginated list of jobs with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: companyId
          in: query
          schema:
            type: string
          description: Filter by company ID
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, closed, archived]
          description: Filter by status
        - name: type
          in: query
          schema:
            type: string
            enum: [full_time, part_time, contract, internship]
          description: Filter by job type
        - name: level
          in: query
          schema:
            type: string
            enum: [entry, junior, mid, senior, lead, principal]
          description: Filter by experience level
        - name: q
          in: query
          schema:
            type: string
          description: Search by title or description
      responses:
        '200':
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSummary'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Jobs
      summary: Create job
      description: Create a new job
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Senior Frontend Developer
                description:
                  type: string
                  nullable: true
                  example: We are looking for a senior frontend developer...
                companyId:
                  type: string
                  example: company-1
                type:
                  type: string
                  enum: [full_time, part_time, contract, internship]
                  example: full_time
                level:
                  type: string
                  enum: [entry, junior, mid, senior, lead, principal]
                  example: senior
                location:
                  type: string
                  nullable: true
                  example: San Francisco, CA
                remote:
                  type: boolean
                  default: false
                salary:
                  type: object
                  nullable: true
                  properties:
                    min:
                      type: integer
                    max:
                      type: integer
                    currency:
                      type: string
                  example: {"min": 120000, "max": 180000, "currency": "USD"}
                requirements:
                  type: object
                  nullable: true
                  example: {"experience": "5+ years", "skills": ["React", "TypeScript"]}
                benefits:
                  type: object
                  nullable: true
                  example: {"health": true, "dental": true, "401k": true}
                status:
                  type: string
                  enum: [draft, active, closed, archived]
                  default: draft
              required: [title, companyId, type, level]
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/jobs/{id}:
    get:
      tags:
        - Jobs
      summary: Get job details
      description: Get detailed information about a specific job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Jobs
      summary: Update job
      description: Update an existing job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                  nullable: true
                type:
                  type: string
                  enum: [full_time, part_time, contract, internship]
                level:
                  type: string
                  enum: [entry, junior, mid, senior, lead, principal]
                location:
                  type: string
                  nullable: true
                remote:
                  type: boolean
                salary:
                  type: object
                  nullable: true
                requirements:
                  type: object
                  nullable: true
                benefits:
                  type: object
                  nullable: true
                status:
                  type: string
                  enum: [draft, active, closed, archived]
      responses:
        '200':
          description: Job updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Jobs
      summary: Delete job
      description: Delete a job
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/jobs/{id}/parse:
    post:
      tags:
        - Jobs
      summary: Parse job description
      description: Parse job description using AI-JD service to extract skills and requirements
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job description parsed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Job description parsed successfully
                  extractedSkills:
                    type: array
                    items:
                      type: string
                    example: ["React", "TypeScript", "Node.js"]
                  updatedJob:
                    $ref: '#/components/schemas/JobDetail'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          description: AI-JD service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: AI-JD service is currently unavailable
                code: SERVICE_UNAVAILABLE

  /api/learn/jobs/{id}/match:
    get:
      tags:
        - Jobs
      summary: Match candidates to job
      description: Find matching candidates for a job using AI-JD service
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: topK
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of top candidates to return
        - name: wSkill
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 1
            default: 0.6
          description: Weight for skill matching
        - name: wEval
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 1
            default: 0.4
          description: Weight for evaluation scores
      responses:
        '200':
          description: Candidate matches found
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/CandidateMatch'
                  totalCandidates:
                    type: integer
                    example: 25
                  matchingCriteria:
                    type: object
                    properties:
                      skillWeight:
                        type: number
                        example: 0.6
                      evaluationWeight:
                        type: number
                        example: 0.4
        '404':
          $ref: '#/components/responses/NotFound'
        '503':
          description: AI-JD service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: AI-JD service is currently unavailable
                code: SERVICE_UNAVAILABLE

  /api/learn/jobs/{id}/skills:
    get:
      tags:
        - Jobs
      summary: Get job skills
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job skills grouped by category
          content:
            application/json:
              schema:
                type: object
                properties:
                  technical:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSkill'
                  soft:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSkill'
                  domain:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobSkill'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/skills:
    get:
      tags:
        - Skills
      summary: List skills
      description: Get a paginated list of skills with optional filtering
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          schema:
            type: string
            enum: [technical, soft, domain]
          description: Filter by skill category
        - name: q
          in: query
          schema:
            type: string
          description: Search by name or description
      responses:
        '200':
          description: List of skills
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SkillWithStats'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              example:
                data:
                  - id: skill-1
                    name: JavaScript
                    category: technical
                    description: Programming language for web development
                    stats:
                      studentsCount: 15
                      jobsCount: 8
                      totalUsage: 23
                pagination:
                  page: 1
                  limit: 20
                  total: 1
                  totalPages: 1
    post:
      tags:
        - Skills
      summary: Create skill
      description: Create a new skill
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  example: React
                category:
                  type: string
                  enum: [technical, soft, domain]
                  example: technical
                description:
                  type: string
                  example: JavaScript library for building user interfaces
              required: [name, category]
      responses:
        '201':
          description: Skill created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          $ref: '#/components/responses/BadRequest'

  /api/learn/skills/{id}:
    get:
      tags:
        - Skills
      summary: Get skill details
      description: Get detailed information about a specific skill
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Skill details with usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillDetail'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Skills
      summary: Update skill
      description: Update an existing skill
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                category:
                  type: string
                  enum: [technical, soft, domain]
                description:
                  type: string
      responses:
        '200':
          description: Skill updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Skill'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Skills
      summary: Delete skill
      description: Delete a skill (only if not in use)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Skill deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Skill deleted successfully
        '400':
          description: Skill is in use and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/learn/skills/categories/stats:
    get:
      tags:
        - Skills
      summary: Get skill category statistics
      description: Get statistics for all skill categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Category statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        category:
                          type: string
                          enum: [technical, soft, domain]
                        skillsCount:
                          type: integer
                        studentUsage:
                          type: integer
                        jobUsage:
                          type: integer
                        totalUsage:
                          type: integer
                  totalSkills:
                    type: integer
              example:
                categories:
                  - category: technical
                    skillsCount: 25
                    studentUsage: 150
                    jobUsage: 45
                    totalUsage: 195
                  - category: soft
                    skillsCount: 12
                    studentUsage: 80
                    jobUsage: 20
                    totalUsage: 100
                totalSkills: 37

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DetailedHealth:
      type: object
      properties:
        status:
          type: string
          example: ok
        service:
          type: string
          example: api-learning
        version:
          type: string
          example: 1.0.0
        environment:
          type: string
          example: development
        database:
          type: string
          example: connected
        uptime:
          type: number
          example: 3600.5
        memory:
          type: object
          properties:
            used:
              type: string
              example: 45.2 MB
            total:
              type: string
              example: 128 MB
        timestamp:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    StudentSummary:
      type: object
      properties:
        id:
          type: string
          example: student-1
        name:
          type: string
          example: Alice Johnson
        email:
          type: string
          format: email
          example: alice@example.com
        avatar:
          type: string
          format: uri
          example: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
        teamId:
          type: string
          nullable: true
          example: team-1
        team:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
        submissionCount:
          type: integer
          example: 5
        evaluationCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    StudentDetail:
      allOf:
        - $ref: '#/components/schemas/StudentSummary'
        - type: object
          properties:
            userId:
              type: string
              example: user-1
            skills:
              type: array
              items:
                $ref: '#/components/schemas/StudentSkill'
            recentSubmissions:
              type: array
              items:
                $ref: '#/components/schemas/SubmissionSummary'
            recentEvaluations:
              type: array
              items:
                $ref: '#/components/schemas/EvaluationSummary'

    StudentProfile:
      type: object
      properties:
        id:
          type: string
          example: student-1
        name:
          type: string
          example: Alice Johnson
        email:
          type: string
          format: email
          example: alice@example.com
        avatar:
          type: string
          format: uri
          example: https://api.dicebear.com/7.x/avataaars/svg?seed=Alice
        team:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
            description:
              type: string
              nullable: true
        skills:
          type: object
          properties:
            technical:
              type: array
              items:
                $ref: '#/components/schemas/StudentSkill'
            soft:
              type: array
              items:
                $ref: '#/components/schemas/StudentSkill'
            domain:
              type: array
              items:
                $ref: '#/components/schemas/StudentSkill'
        performance:
          type: object
          properties:
            tasks:
              type: object
              properties:
                totalSubmissions:
                  type: integer
                averageScore:
                  type: number
                completionRate:
                  type: number
            evaluations:
              type: object
              properties:
                averageScore:
                  type: number
                totalEvaluations:
                  type: integer
        insights:
          type: object
          properties:
            strengths:
              type: array
              items:
                type: string
            areasForImprovement:
              type: array
              items:
                type: string
            recommendations:
              type: array
              items:
                type: string
        generatedAt:
          type: string
          format: date-time

    StudentSkill:
      type: object
      properties:
        skill:
          $ref: '#/components/schemas/Skill'
        level:
          type: integer
          minimum: 1
          maximum: 10
          example: 8
        verified:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Skill:
      type: object
      properties:
        id:
          type: string
          example: skill-1
        name:
          type: string
          example: JavaScript
        category:
          type: string
          enum: [technical, soft, domain]
          example: technical
        description:
          type: string
          nullable: true
          example: Programming language for web development
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TeamSummary:
      type: object
      properties:
        id:
          type: string
          example: team-1
        name:
          type: string
          example: Frontend Team
        description:
          type: string
          nullable: true
          example: Team focused on frontend development
        memberCount:
          type: integer
          example: 5
        taskCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TeamDetail:
      allOf:
        - $ref: '#/components/schemas/TeamSummary'
        - type: object
          properties:
            members:
              type: array
              items:
                $ref: '#/components/schemas/StudentSummary'
            tasks:
              type: array
              items:
                $ref: '#/components/schemas/TaskSummary'

    TaskSummary:
      type: object
      properties:
        id:
          type: string
          example: task-1
        title:
          type: string
          example: React Component
        description:
          type: string
          nullable: true
          example: Build a reusable React component
        teamId:
          type: string
          example: team-1
        team:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        maxScore:
          type: integer
          example: 100
        dueDate:
          type: string
          format: date-time
          example: "2024-02-01T23:59:59Z"
        status:
          type: string
          enum: [draft, active, completed, archived]
          example: active
        submissionCount:
          type: integer
          example: 3
        averageScore:
          type: number
          nullable: true
          example: 85.5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskDetail:
      allOf:
        - $ref: '#/components/schemas/TaskSummary'
        - type: object
          properties:
            requirements:
              type: object
              nullable: true
              example: {"framework": "React", "testing": "Jest"}
            submissions:
              type: array
              items:
                $ref: '#/components/schemas/SubmissionSummary'
            stats:
              type: object
              properties:
                totalSubmissions:
                  type: integer
                uniqueStudents:
                  type: integer
                averageScore:
                  type: number
                submissionRate:
                  type: number

    SubmissionSummary:
      type: object
      properties:
        id:
          type: string
          example: sub-1
        taskId:
          type: string
          example: task-1
        studentId:
          type: string
          example: student-1
        student:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
            email:
              type: string
            avatar:
              type: string
        content:
          type: object
          example: {"github_url": "https://github.com/user/repo"}
        status:
          type: string
          enum: [submitted, evaluated]
          example: evaluated
        score:
          type: integer
          nullable: true
          example: 85
        feedback:
          type: string
          nullable: true
          example: Good work on the implementation
        rubric:
          type: object
          nullable: true
          example: {"code_quality": 8, "functionality": 9}
        isLate:
          type: boolean
          example: false
        scorePercentage:
          type: number
          nullable: true
          example: 85.0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EvaluationSummary:
      type: object
      properties:
        id:
          type: string
          example: eval-1
        studentId:
          type: string
          example: student-1
        evaluatorId:
          type: string
          example: student-2
        type:
          type: string
          enum: [peer, self, instructor]
          example: peer
        category:
          type: string
          enum: [technical, communication, leadership, problem_solving]
          example: technical
        score:
          type: integer
          minimum: 1
          maximum: 10
          example: 8
        feedback:
          type: string
          nullable: true
          example: Strong technical skills demonstrated
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    SkillWithStats:
      allOf:
        - $ref: '#/components/schemas/Skill'
        - type: object
          properties:
            stats:
              type: object
              properties:
                studentsCount:
                  type: integer
                  example: 15
                jobsCount:
                  type: integer
                  example: 8
                totalUsage:
                  type: integer
                  example: 23

    SkillDetail:
      allOf:
        - $ref: '#/components/schemas/Skill'
        - type: object
          properties:
            studentSkills:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  level:
                    type: integer
                    minimum: 1
                    maximum: 10
                  verified:
                    type: boolean
                  student:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      avatar:
                        type: string
                        nullable: true
            jobSkills:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  required:
                    type: boolean
                  weight:
                    type: number
                    format: float
                  job:
                    type: object
                    properties:
                      id:
                        type: string
                      title:
                        type: string
                      company:
                        type: object
                        properties:
                          id:
                            type: string
                          name:
                            type: string
            stats:
              type: object
              properties:
                studentsCount:
                  type: integer
                  example: 15
                jobsCount:
                  type: integer
                  example: 8
                averageStudentLevel:
                  type: number
                  format: float
                  example: 7.2
                averageJobWeight:
                  type: number
                  format: float
                  example: 0.8
                verifiedStudentsCount:
                  type: integer
                  example: 12

    SkillCategoryStats:
      type: object
      properties:
        category:
          type: string
          enum: [technical, soft, domain]
          example: technical
        count:
          type: integer
          example: 25
        studentsCount:
          type: integer
          example: 150
        jobsCount:
          type: integer
          example: 45
        averageLevel:
          type: number
          format: float
          example: 6.8
        topSkills:
          type: array
          items:
            type: object
            properties:
              skill:
                $ref: '#/components/schemas/Skill'
              usage:
                type: integer
                example: 35

    Error:
      type: object
      properties:
        message:
          type: string
          example: Resource not found
        code:
          type: string
          example: NOT_FOUND
        details:
          type: object
          nullable: true
        timestamp:
          type: string
          format: date-time

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Resource not found
            code: NOT_FOUND
            timestamp: "2024-01-15T10:30:00Z"

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: Invalid input data
            code: BAD_REQUEST
            details:
              field: email
              issue: Invalid email format
            timestamp: "2024-01-15T10:30:00Z"

security:
  - bearerAuth: []

tags:
  - name: Health
    description: Health check endpoints
  - name: Students
    description: Student management endpoints
  - name: Teams
    description: Team management endpoints
  - name: Tasks
    description: Task management endpoints
  - name: Submissions
    description: Submission management endpoints
  - name: Evaluations
    description: Evaluation management endpoints
  - name: Companies
    description: Company management endpoints
  - name: Jobs
    description: Job management endpoints
  - name: Skills
    description: Skill management endpoints